{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["base_url","process","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadTasks","showLoader","axios","concat","then","response","setState","tasks","data","hideLoader","console","log","catch","error","state","onChangeNewTask","event","newTask","currentTarget","value","toggleCheck","id","index","_","new_status","status","addTask","_this$state","current_id","name","deleteTask","renderTasks","map","task","react_default","a","createElement","className","es_checkbox","style","marginLeft","fontSize","checked","onChange","es_button","onClick","type","icon","size","search","searchQuery","searchInTasks","toLowerCase","indexOf","_this$state2","filteredTasks","active","completed","spin","class","input","Search","placeholder","margin","width","Group","allowClear","onPressEnter","disabled","row","col","lg","xs","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9e9eb93.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {Checkbox, Input, Button, Spin, Icon, Row, Col} from 'antd';\nimport * as _ from 'lodash';\nimport * as axios from 'axios';\n\nconst base_url = process.env.REACT_APP_BASE_URL;\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      tasks: [],\n      newTask : null,\n      searchQuery : \"\",\n      current_id: 7,\n      showLoader: true\n    }\n    \n    this.showLoader();\n    this.loadTasks();\n\n  }\n\n  loadTasks = () => {\n    this.showLoader();\n    axios.get(`${base_url}/tasks`)\n    .then( response => {\n      this.setState({tasks: response.data });\n      this.hideLoader();\n      console.log(response);  \n    })\n    .catch(error => {\n      this.hideLoader();\n    });\n\n    console.log(this.state);\n  }\n\n  showLoader = () => {\n    this.setState({showLoader : true});\n  }\n\n  hideLoader = () => {\n    this.setState({showLoader : false});\n  }\n\n  onChangeNewTask = (event) => {\n    this.setState({newTask: event.currentTarget.value});\n  }\n\n  toggleCheck = (id) => {\n    let {tasks} = this.state;\n    \n    let index = _.findIndex(tasks, {id: id});\n    if(index !== -1){\n\n      this.showLoader();\n      const new_status = tasks[index].status === 0 ? 1 : 0;\n      axios.patch(`${base_url}/tasks/${id}`, {status : new_status})\n      .then(response => {\n\n        // tasks[index].status = new_status;\n        // this.setState({tasks: tasks});\n        // this.hideLoader();\n        this.loadTasks();\n      })\n      .catch(error => {\n        // this.hideLoader();\n        this.loadTasks();\n      });\n    }\n\n\n    \n  }\n\n  addTask = () => {\n    let {tasks, newTask, current_id} = this.state;\n    \n    this.showLoader();\n    \n    if(newTask && newTask !== '') {\n      axios.post(`${base_url}/tasks`, {name: newTask})\n      .then(response => {\n        // tasks.push(response.data);\n        this.setState({ newTask: null});\n        // this.hideLoader();\n        this.loadTasks();\n      })\n      .catch(error => {\n        // this.hideLoader();\n        this.loadTasks();\n      })\n    }\n    \n  }\n\n  deleteTask = (id) => {\n    let {tasks} = this.state;\n    \n    let index = _.findIndex(tasks, {id: id});\n    \n    if(index !== -1){\n      this.showLoader();\n\n      axios.delete(`${base_url}/tasks/${id}`)\n      .then(response => {\n        \n        // tasks.splice(index, 1);\n        // this.setState({tasks: tasks});\n        // this.hideLoader();\n        this.loadTasks();\n\n      }).catch(error => {\n\n        // this.hideLoader();\n        this.loadTasks();\n\n      });\n    }\n\n  }\n  \n  renderTasks = (tasks) => {\n    return tasks.map((task,index) => {\n      return (\n      <div className=\"task-container\">\n        <Checkbox\n          style={{  marginLeft: 8, fontSize : 20}}\n          checked={task.status === 1}\n          onChange={(event) => {this.toggleCheck(task.id, event)} }>\n            {task.name}\n        </Checkbox>\n        <Button onClick={() => {this.deleteTask(task.id)} } type=\"danger\" icon=\"delete\" size='small' />\n      </div> )\n    })\n  }\n\n  search = (event) => {\n    this.setState({searchQuery: event.currentTarget.value});\n  }\n  \n  searchInTasks = (tasks, searchQuery) => {\n    return _.filter(tasks, function(task) { \n        if(task.name) \n          return task.name.toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1;\n        return false;\n        } );\n  }\n\n  render() {\n    const {tasks, searchQuery, newTask, showLoader} = this.state;\n    const filteredTasks = this.searchInTasks(tasks, searchQuery);\n    const active = _.filter(filteredTasks, {status: 0});\n    const completed = _.filter(filteredTasks, {status: 1});\n    return (\n      <div>\n        {showLoader && <div className=\"spinner-contailer\"><Spin size=\"large\" /></div> }\n\n        <div class=\"page-wraper\">\n          \n          <Input.Search \n          placeholder=\"Search\"\n          onChange={this.search}\n          style={{ margin: \"20px\", width: \"250px\"}}>\n\n          </Input.Search>\n          <Button onClick={this.loadTasks}><Icon type=\"reload\" /></Button>\n          <Button.Group>\n              <Input style={{ width: 250 }} placeholder=\"Add a task\" allowClear value={this.state.newTask} onPressEnter={this.addTask} onChange={this.onChangeNewTask} />\n              <Button disabled={!newTask || newTask == ''} onClick={this.addTask} >Add</Button>\n          </Button.Group>\n          <Row>\n            <Col lg={12} xs={24}>\n            <div class=\"task-list\">\n                <h2>Active</h2>\n                {this.renderTasks(active)}\n              </div>\n            </Col>\n            <Col lg={12} xs={24}>\n            <div class=\"task-list completed-tasks\">\n                <h2>Completed</h2>\n                {this.renderTasks(completed)}\n              </div>\n            </Col>\n          </Row>\n\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst init_tasks = [\n  {\n      \"id\": 2,\n      \"name\": \"buy milk\",\n      \"status\": 1,\n      \"createdAt\": \"2019-03-05T18:30:53.000Z\",\n      \"updatedAt\": \"2019-03-05T19:02:31.000Z\"\n  },\n  {\n      \"id\": 3,\n      \"name\": \"read a book\",\n      \"status\": 1,\n      \"createdAt\": \"2019-03-05T18:30:55.000Z\",\n      \"updatedAt\": \"2019-03-05T19:06:15.000Z\"\n  },\n  {\n      \"id\": 4,\n      \"name\": \"Call R\",\n      \"status\": 1,\n      \"createdAt\": \"2019-03-05T18:31:07.000Z\",\n      \"updatedAt\": \"2019-03-05T19:06:33.000Z\"\n  },\n  {\n      \"id\": 5,\n      \"name\": \"Order Pizza\",\n      \"status\": 0,\n      \"createdAt\": \"2019-03-05T18:33:11.000Z\",\n      \"updatedAt\": \"2019-03-05T19:07:23.000Z\"\n  },\n  {\n      \"id\": 6,\n      \"name\": \"meditate\",\n      \"status\": 0,\n      \"createdAt\": \"2019-03-05T18:33:19.000Z\",\n      \"updatedAt\": \"2019-03-05T18:33:19.000Z\"\n  }\n];\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}